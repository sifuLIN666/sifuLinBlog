[{"categories":["linux下载器"],"contents":"安装 debian 安装,其他版本以及更详细教程请看官网\n1 2 3 4 5 6 7 8 9 apt-get install qbittorrent-nox # 创建配置目录 mkdir /opt/qBittorrent # 创建一个用户实现权限隔离 sudo useradd -r -s /usr/sbin/nologin qbtuser # 给文件夹设置可访问权限 setfacl -m d:u:username:rw filename # 查看文件夹权限 getfacl useradd 命令详解 -r -s /usr/sbin/nologin 创建系统用户,即 UID 小于 1000 的用户 设置该用户的 shell 交互逻辑 此为该用户不允许访问交互式 shell setfacl 命令详解 -m -R d 修改 acl 访问权限 递归设置 设置默认权限,这意味着新创建的子文件夹也会继承父文件夹的权限 设置守护进程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # 创建系统服务 cat \u0026gt; /etc/systemd/system/qbittorrent.service \u0026lt;\u0026lt; EOF [Unit] Description=qBittorrent-nox service Documentation=man:qbittorrent-nox(1) Wants=network-online.target After=network-online.target nss-lookup.target [Service] # if you have systemd \u0026lt; 240 (Ubuntu 18.10 and earlier, for example), you probably want to use Type=simple instead Type=exec # change user as needed User=qbtuser # The -d flag should not be used in this setup ExecStart=/usr/bin/qbittorrent-nox --profile=/opt --webui-port=8081 # uncomment this for versions of qBittorrent \u0026lt; 4.2.0 to set the maximum number of open files to unlimited #LimitNOFILE=infinity # uncomment this to use \u0026#34;Network interface\u0026#34; and/or \u0026#34;Optional IP address to bind to\u0026#34; options # without this binding will fail and qBittorrent\u0026#39;s traffic will go through the default route # AmbientCapabilities=CAP_NET_RAW [Install] WantedBy=multi-user.target EOF 启动 qbittorrent 1 2 3 systemdctl daemon-reload systemdctl enable qbittorrent systemdctl start qbittorrent 之后浏览器访问 http://ip:8081 端口,输入账户 admin,密码 adminadmin 即可\n修改账户密码以及语言 如果需要配置反向代理请按图中操作 配置反向代理请求头需要设置 HOST,在 lucky 中如下操作 注意事项 如果需要在不同的文件夹下载保存数据,记得设置用户权限,否则会下载失败的\n","date":"2024-10-19T00:00:00Z","permalink":"http://localhost:1313/zh-cn/2024/10/19/qbit/","section":"posts","series":["qbit"],"summary":"经典下载器qbit的教程","tags":["bt","qbit"],"title":"Qbit下载教程","type":null},{"categories":["内网穿透","tailscale"],"contents":"前言 上回介绍了如何使用 tailscale 进行内网穿透，但是官方的中继服务器都在国外,直接导致打洞时间很长,而且万一没打成,官方的 2Mbps 的小水管真的会让人想死,于是就有了本期的自建 derp 服务器教程\n上期链接\n准备工作 首先准备一个域名,比如 derp.example.com,还有一个 VPS,然后把域名解析到 VPS 的公网 IP 上,这里我 VPS 的系统选择 Debian12\n编译 derper 服务器 1 2 3 4 5 6 7 8 # 更新软件源并安装必要软件 apt-get update apt-get curl wget vim sudo tar # 创建目录 mkdir /opt/derp/bin mkdir /opt/derp/config mkdir /opt/derp/cert mkdir /opt/go 因为 derper 服务器是需要由 go 语言编译的,所以需要安装go\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # 根据情况换新版本的go wget https://go.dev/dl/go1.23.2.linux-amd64.tar.gz # 还需要配置ssl证书,安装acme curl https://get.acme.sh | sh -s email=1982209396@qq.com # 解压go的压缩包 tar -zxvf go*.tar.gz -C /opt # 临时环境变量 export PATH=$PATH:/opt/go/bin # 永久环境变量添加 echo \u0026#34;PATH=$PATH:/opt/go/bin\u0026#34; \u0026gt;\u0026gt; /root/.bashrc # 加载环境变量 source /root/.bashrc go version # 出现go version go1.23.2 linux/amd64说明成功了 # 确认编译目录 go env # 找到GOPATH=\u0026#39;/root/go\u0026#39;,说明编译后的二进制文件会放在这个目录下 # 编译 go install tailscale.com/cmd/derper@latest mv go/bin/derper /opt/derp/bin chmod +x /opt/derp/bin/derper 申请 ssl 证书 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 设置acme自动更新证书 acme.sh --upgrade --auto-upgrade # 导入cloudflare的token,不建议使用全局API Token,这里根据情况自己设置 # 使用cat获取内容,用\u0026gt;\u0026gt;追加,\u0026gt;会覆盖原文件,不要打错了 cat \u0026gt;\u0026gt; /root/.bashrc \u0026lt;\u0026lt; EOF CF_Token=\u0026#34;****************\u0026#34; EOF # 设置默认的证书签发机构,根据情况选择 acme.sh --set-default-ca --server letsencrypt # 申请证书,这里我的是泛域名证书,可以根据情况换成比如derp.example.com acme.sh --issue --dns dns_cf -d example.com -d *.example.com --keylength ec-256 # acme申请好的证书不要直接动,应该使用install-cert命令安装到指定位置 acme.sh --install-cert -d sifulin.top --ecc \\ --key-file /opt/derp/cert/derp.example.com.key \\ --fullchain-file /opt/derp/cert/derp.example.com.crt 配置 derper 服务器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 /opt/derp/bin/derper -h #查看命令 # -a是tls监听端口,stun-port端口主要用于测延迟,http-port为-1表示不监听http,证书存放在/opt/derp/cert目录下,且是手动更新证书,hostname则是准备好的域名 cat \u0026gt; /etc/systemd/system/derper.service \u0026lt;\u0026lt; EOF [Unit] Description=Tailscale Derper RelayServer BindsTo=tailscaled.service After=tailscaled.service network.target [Service] User=root Restart=always ExecStart=/opt/derp/bin/derper -a=:4443 -stun-port=3478 -http-port=-1 -certmode=manual -hostname=derp.example.com -certdir=/opt/derp/cert -verify-clients RestartSec=5 StartLimitInterval=0 [Install] WantedBy=multi-user.target EOF systemctl daemon-reload systemctl enable derper.service 广播 derper 服务器 进入 tailscale 的控制台,找到 derpMap 后按照如下配置编辑\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 { \u0026#34;derpMap\u0026#34;: { \u0026#34;OmitDefaultRegions\u0026#34;: false, // 是否忽略官方服务器 \u0026#34;Regions\u0026#34;: { \u0026#34;900\u0026#34;: { \u0026#34;RegionID\u0026#34;: 900, \u0026#34;RegionCode\u0026#34;: \u0026#34;\u0026lt;这里是Derp服务器所在城市缩写（城市代号）\u0026gt;\u0026#34;, \u0026#34;RegionName\u0026#34;: \u0026#34;\u0026lt;这里是Derp服务器所在城市全称\u0026gt;\u0026#34;, \u0026#34;Nodes\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;\u0026lt;Derp服务器的名称\u0026gt;\u0026#34;, \u0026#34;RegionID\u0026#34;: 900, \u0026#34;HostName\u0026#34;: \u0026#34;derp.example.com\u0026#34;, \u0026#34;STUNPort\u0026#34;: 3478, \u0026#34;IPv4\u0026#34;: \u0026#34;0.0.0.0/0\u0026#34;, // 可忽略这条 \u0026#34;IPv6\u0026#34;: \u0026#34;[::]\u0026#34;, // 可忽略这条 \u0026#34;DERPPort\u0026#34;: 8443 } ] } } } } 添加安全裤 由于这个服务器没有任何鉴权配置,如果端口域名泄露之后会被白嫖,这样是个人就可以榨干她的流~量~了,所以我们用-verify-clients 这条命令限制访问,这条命令生效的话需要使用 tailscale 服务,所以安装一下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 添加tailscale源 curl -fsSL https://pkgs.tailscale.com/stable/debian/bookworm.noarmor.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg \u0026gt;/dev/null curl -fsSL https://pkgs.tailscale.com/stable/debian/bookworm.tailscale-keyring.list | sudo tee /etc/apt/sources.list.d/tailscale.list # 更新软件源并安装tailscale sudo apt-get update sudo apt-get install tailscale # 设置自动更新 tailscale set --auto-update # 因为没有子网路由需要配置,所以直接启动 tailscale up # 启动一下ip转发不然只能打洞没法中继 echo \u0026#34;net.ipv4.ip_forward=1\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf sysctl -p # 启动derper服务器 systemctl start derper.service 测试 随便找一个别的设备,进入终端输入\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 tailscale netcheck Report: * UDP: true * IPv4: yes, \u0026lt;你当前这个测试主机的公网ip\u0026gt; * IPv6: yes, [\u0026lt;你当前这个测试主机的公网ipv6\u0026gt;] * MappingVariesByDestIP: true * PortMapping: * CaptivePortal: false * Nearest DERP: \u0026lt;这里是Derp服务器所在城市全称\u0026gt; * DERP latency: - \u0026lt;这里是Derp服务器所在城市缩写（城市代号）\u0026gt;: 34.2ms (\u0026lt;这里是Derp服务器所在城市全称\u0026gt;) - tok: 120.8ms (Tokyo) - sfo: 129.3ms (San Francisco) - lax: 134.4ms (Los Angeles) - sea: 146.8ms (Seattle) - sin: 153.9ms (Singapore) - den: 155.8ms (Denver) - hkg: 160.3ms (Hong Kong) - ord: 173.9ms (Chicago) - tor: 188.2ms (Toronto) - mia: 189.6ms (Miami) - nyc: 189.7ms (New York City) - dfw: 190.4ms (Dallas) - hnl: 192.5ms (Honolulu) - fra: 211.2ms (Frankfurt) - ams: 212.7ms (Amsterdam) - par: 215.5ms (Paris) - lhr: 222.4ms (London) - waw: 234.7ms (Warsaw) - mad: 263.6ms (Madrid) - syd: 306.6ms (Sydney) - blr: 308.2ms (Bangalore) - sao: 316.2ms (São Paulo) - dbi: 318.4ms (Dubai) - jnb: 377.7ms (Johannesburg) - nai: 381.8ms (Nairobi) 出现你的服务器就 ok 了\n","date":"2024-10-08T00:00:00Z","permalink":"http://localhost:1313/zh-cn/2024/10/08/tailscale-tutorial-2/","section":"posts","series":["tailscale一点通"],"summary":"欲火焚身身在外,2T资源隔天涯,打洞穿透又失败,不如全都自己搞","tags":["内网穿透","tailscale","derper中继服务器"],"title":"Tailscale教程第二弹","type":null},{"categories":["bind9教程"],"contents":"前言 DNS 想必大家并不陌生,但是在主机上设置好 DNS 服务器后,比如 223.5.5.5,那么 223.5.5.5 是怎么找到目标域名的 ip 的呢?全世界那么多网站,要是全依赖 223.5.5.5 的话,那岂不是要炸了?所以肯定是分布式的存储,那么问题来了,DNS 的分布式存储结构是什么样的呢?我们先来看一幅图:\n注意到这张图要访问的www.baidu.com.\r注意这个\".\"\r很重要,其实在所有的网站后面都会有这个\".\"\r,这个其实就是根域名,根域名指向的服务器其实就是根服务器,他是 13 个固定的 ip 地址,在 DNS 请求的时候 223.5.5.5 首先会询问根服务器,根服务器会告知.com. 服务器的 ip,之后 223.5.5.5 会问.com. 服务器,.com. 服务器存储着诸如 baidu.com. 的 DNS 服务器的 ip,之后 223.5.5.5 会问存有 baidu.com. 的 DNS 服务器,这些服务器最终返回存储有 www.baidu.com.\r的 ip 的 DNS 服务器,最终 223.5.5.5 去问这个服务器得到 www.baidu.com.\r的 ip,这就可以完成域名解析了.\n在这个过程中,PC 发给 223.5.5.5 的请求叫做转发,而 223.5.5.5 的查询过程叫做递归,其中最终查到的www.baidu.com.\r的 DNS 服务器就叫做权威 DNS 服务器.\n递归服务器的优势 其实从上面的结果中不难看出,递归查询需要查询多轮,时间上肯定会比转发要长,那我们搭建递归 DNS 服务器有什么意义呢?我们不妨退一步,换个问题,都用公共 DNS 的话,选择哪个 DNS 有什么区别吗?首先我们不考虑延迟这个问题,就返回的解析结果来考虑,不同的 DNS 服务器可能返回不一样的结果。一个常见的场景是,很多域名使用了 CDN,解析结果根据所在地 IP 来返回,比如你是广东电信,返回在广东电信的服务器地址,而在北京联通就返回北京联通的地址,就结果而言,在东南沿海的你显然不希望查询到了一个新疆 CDN 的 ip。虽然有 ECS 这种协议存在(DNS ECS 是 DNS 协议的一个扩展,它允许递归 DNS 解析器在发送给权威 DNS 服务器的请求中包含终端用户 IP 地址数据的部分),但首先它是用在递归 DNS 上的,也就是部署在 114 这种公共服务器上的,其次你请求的域名所在的权威 DNS 要支持 ECS 协议才可以,说白了这个协议对局域网用户来说没什么用,因为你什么都做不了,甚至还可能有隐私泄露的问题。那如果使用自己的递归 DNS 服务器,即把 114 这样的 DNS 服务器装你家里。这样你的每个请求都非常的原生地到达了权威 DNS 服务器,权威 DNS 根据你自建的递归 DNS 的 ip 返回离你最近的 CDN 的 ip,其结果可谓是准确中的准确。你再也不需要对 DNS 服务器进行收集和测速，也不需要对解析结果进行测速,本来就是权威 DNS 根据你家里递归 DNS 发起递归请求的 ip 返回的最优结果,测了也没意义。\n还有一个不太常见的问题就是,公共 DNS 服务器值得信任吗?虽然有 DNSSEC 这种东西存在,但它并不能解决 DNS 劫持和污染,你除了知道它结果可能是错的之外什么都做不了。即使 DNS 结果值得信任,但你的查询记录可能会被公共 DNS 服务器记录日志,也就是可能会造成一定的隐私问题。一个更加离谱的可能是,如果公共 DNS 服务器被攻击,那你的查询结果可能被引导到恶意网站,就算这种可能性比较低,公共 DNS 服务器也有故障的时候,你可能又开始考虑:我能保证谁的公共 DNS 服务器 100%稳定性?是的,不能保证。但当你拥有一台属于自己的递归 DNS 服务器的时候,稳定性和隐私问题将由你自己掌控。\n搭建内网递归 DNS 服务器 这里选用 bind9 作为递归服务器,因为 apt 软件源中就有 bind9,而且他还可以配置为权威 DNS 服务器,所以非常方便。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 apt-get install -y bind9* # 安装好之后配置文件在 /etc/bind,目录结构如下 /etc/bind |-- bind.keys |-- db.0 |-- db.127 |-- db.255 |-- db.empty |-- db.local |-- named.conf |-- named.conf.default-zones |-- named.conf.local |-- named.conf.options |-- rndc.key `-- zones.rfc1918 主文件为name.conf\r,其配置文件格式为 C 风格\n1 2 3 4 5 6 7 8 9 10 11 // This is the primary configuration file for the BIND DNS server named. // // Please read /usr/share/doc/bind9/README.Debian for information on the // structure of BIND configuration files in Debian, *BEFORE* you customize // this configuration file. // // If you are just adding zones, please do that in /etc/bind/named.conf.local include \u0026#34;/etc/bind/named.conf.options\u0026#34;; // 监听配置文件 include \u0026#34;/etc/bind/named.conf.local\u0026#34;; // 自定义域名文件 include \u0026#34;/etc/bind/named.conf.default-zones\u0026#34;; // 存储根服务器IP以及回环地址内网网段的信息 配置监听文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 options { // 缓存文件夹 directory \u0026#34;/var/cache/bind\u0026#34;; // If there is a firewall between you and nameservers you want // to talk to, you may need to fix the firewall to allow multiple // ports to talk. See http://www.kb.cert.org/vuls/id/800113 // If your ISP provided one or more IP addresses for stable // nameservers, you probably want to use them as forwarders. // Uncomment the following block, and insert the addresses replacing // the all-0\u0026#39;s placeholder. // forwarders { // 223.5.5.5; // }; //======================================================================== // If BIND logs error messages about the root key being expired, // you will need to update your keys. See https://www.isc.org/bind-keys //======================================================================== // 开启DNSSEC验证,讲道理在内网里面自己用的话这个没啥意义 dnssec-validation auto; listen-on { localhost; }; // 监听本地所有IP allow-query { any; }; // 允许所有IP的DNS请求 recursion yes; // 开启递归查询 allow-recursion { any; }; // 允许所有IP都使用递归查询 recursive-clients 1024; // 最大递归查询客户端数量 }; 配置自定义域名文件 如果有一些特殊需求,比如内网很多服务,其实是可以直接用内网 DNS 服务器避免回环问题的,而且诸如谷歌 TV 激活的 ntp 服务器也可以很方便用内网 DNS 服务器进行 host 劫持,我在这里举一个例子 在name.conf.local\r添加如下\n1 2 3 4 5 6 7 // rfc1918主要包含是内网的ip地址段,也就是如果需要由IP解析域名的时候,通过配置这个文件可以马上得到IP所对应的域名而不需要到公网上去反向解析域名,本来就是内网部署,到公网去反向解析简直抽象,这个根据情况可以放开注释 // include \u0026#34;/etc/bind/zones.rfc1918\u0026#34;; zone \u0026#34;lzhlovelcl.top\u0026#34; { type master; file \u0026#34;/etc/bind/db.example.com\u0026#34;; }; 添加好之后,创建配置文件db.example.com\r1 touch /etc/bind/db.example.com 添加如下内容,各参数意义如下\nSOA: 起始记录 NS: 名称服务器记录 A: ipv4 记录 IN: 网络记录 TTL: 存活时间 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 $TTL\t604800 # 设置变量 # 注意邮箱的@的符用.代替,@在这里表示所有域名起始记录的解析. @\tIN\tSOA\tlzhlovelcl.top. 1982209396.qq.com. ( 2\t; Serial 604800\t; Refresh 86400\t; Retry 2419200\t; Expire 604800 )\t; Negative Cache TTL ; @\tIN\tNS\tdns.example.com. # 指定example.com由dns.example.com解析 dns IN A 192.168.50.6 # 指定dns.example.com的IP @\tIN\tA\t192.168.50.4 # 指定example.com的IP plex\tIN\tA\t192.168.50.4 # 指定plex.example.com的IP lucky\tIN\tA\t192.168.50.4 portainer\tIN\tA\t192.168.50.4 jellyfin\tIN\tA\t192.168.50.4 alist\tIN\tA\t192.168.50.4 aria2\tIN\tA\t192.168.50.4 这里只是简单示范,更具体的欢迎看这个大佬的文章\n1 2 3 4 5 6 7 8 9 10 11 12 # 检测配置文件是否正确 named-checkconf # 默认监听53端口,确保没有被占用 systemctl enable --now named nslookup whoami.03k.org 223.5.5.5 # 测试223.5.5.5换成你装了bind9的主机的IP # Server: 223.5.5.5 # Address: 223.5.5.5#53 # Non-authoritative answer: # Name: whoami.03k.org # Address: 47.103.54.202 这个就是递归服务器连接到权威DNS的ip,可以复制进浏览器看看ip属地 # ;; Got SERVFAIL reply from 223.5.5.5 至此部署完毕,这个项目其实也可以和 singbox 联动形成一个国内国外通吃的超级 dns 服务器,有空再说吧\n","date":"2024-10-08T00:00:00Z","permalink":"http://localhost:1313/zh-cn/2024/10/08/%E9%80%92%E5%BD%92%E6%9C%8D%E5%8A%A1%E5%99%A8bind9/","section":"posts","series":["DNS从入门到223.5.5.5"],"summary":"Article Description","tags":["DNS","递归DNS","bind9"],"title":"递归DNS服务器bind9","type":null},{"categories":["linux下载器"],"contents":"Aria2 下载器介绍 友情提示: bt 做种的时候别人会连接你的服务器,强烈建议配置好 vlan 或者防火墙进行下载\nAria2 是一款非常强大的开源多协议命令行下载工具，它支持 HTTP、HTTPS、FTP 以及 BitTorrent 等协议，适用于多种操作系统，包括 Windows、Linux 和 macOS。Aria2 的设计目标是为了提高下载速度和灵活性，具备以下主要特点：\n多线程下载： Aria2 支持多线程下载，可以从多个源同时下载同一个文件，显著提高了下载速度。这对于大文件下载尤其有用，因为它可以利用带宽的全部潜力。\n断点续传： 支持断点续传功能，这意味着即使下载过程中断，也可以从上次中断的地方继续下载，而不必重新开始整个下载过程。\n多协议支持： Aria2 支持多种网络协议，包括 HTTP、HTTPS、FTP、SFTP、BitTorrent (BT) 和 Metalink。这使得它成为一个非常通用的下载工具，几乎可以处理任何类型的下载任务。\n轻量级和灵活： Aria2 本身是一个很小的应用程序，但它提供了丰富的命令行选项，允许用户进行详细的配置。此外，Aria2 可以通过 Web 界面、图形用户界面(GUI)或其他工具来管理，增加了使用的灵活性。\n后台下载和静默模式： Aria2 支持后台下载，用户可以在启动下载任务后关闭控制台窗口，而下载任务仍将继续执行。此外，它还支持静默模式，可以在没有用户交互的情况下工作。\n安装 aria2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 # debian的 apt 包管理器已经包含aria2,但是没有systemctl服务 apt-get install -y aria2 mkdir -p /opt/aria2 # 设置systemctl服务 cat \u0026gt; /etc/systemd/system/aria2.service \u0026lt;\u0026lt; EOF [Unit] Description=aria2 Daemon After=network.target [Service] Type=forking ExecStart=/opt/aria2/aria2.sh start ExecStop=/opt/aria2/aria2.sh stop ExecRestart=/opt/aria2/aria2.sh restart Restart=on-failure [Install] WantedBy=multi-user.target EOF # 这个systemctl服务是通过脚本来控制的,现在把脚本补上 cat \u0026gt; /opt/aria2/aria2.sh \u0026lt;\u0026lt; EOF #!/bin/bash stop(){ pid=$(pidof \u0026#39;aria2c\u0026#39;) if [ -n \u0026#34;$pid\u0026#34; ]; then kill $pid else echo \u0026#34;没有找到 aria2c 的进程\u0026#34; fi } case \u0026#34;$1\u0026#34; in start) aria2c --conf-path=/opt/aria2/aria2.conf -D ;; stop) stop ;; restart) stop sleep 2 aria2c --conf-path=/opt/aria2/aria2.conf -D ;; esac exit EOF chmod +x /opt/aria2/aria2.sh # 这个脚本中设置了配置文件路径,可以自行修改 cat \u0026gt; /opt/aria2/aria2.conf \u0026lt;\u0026lt; EOF # 下载路径 dir=/mnt/samsung/aria2 # 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M #disk-cache=32M #disk-cache=32M # 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc # 预分配所需时间: none \u0026lt; falloc ? trunc \u0026lt; prealloc # falloc和trunc则需要文件系统和内核支持 # NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项 file-allocation=trunc # 断点续传 continue=true ## 下载连接相关 ## # 最大同时下载任务数, 运行时可修改, 默认:5 max-concurrent-downloads=5 # 同一服务器连接数, 添加时可指定, 默认:1 max-connection-per-server=5 # 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M # 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载 min-split-size=10M # 单个任务最大线程数, 添加时可指定, 默认:5 split=5 # 整体下载速度限制, 运行时可修改, 默认:0 #max-overall-download-limit=0 # 单个任务下载速度限制, 默认:0 #max-download-limit=0 # 整体上传速度限制, 运行时可修改, 默认:0 #max-overall-upload-limit=0 # 单个任务上传速度限制, 默认:0 #max-upload-limit=0 # 禁用IPv6, 默认:false disable-ipv6=true ## 进度保存相关 ## # 从会话文件中读取下载任务 input-file=/opt/aria2/aria2.session # 在Aria2退出时保存`错误/未完成`的下载任务到会话文件 save-session=/opt/aria2/aria2.session # 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0 save-session-interval=60 ## RPC相关设置,可以搭配webUI使用 ## # 启用RPC, 默认:false enable-rpc=true # 允许所有来源, 默认:false rpc-allow-origin-all=true # 允许非外部访问, 默认:false rpc-listen-all=true # 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同 #event-poll=select # RPC监听端口, 端口被占用时可以修改, 默认:6800 rpc-listen-port=6800 # 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项 rpc-secure=false rpc-secret=wsr19990902 ## BT/PT下载相关 ## # 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true #follow-torrent=true # BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999 listen-port=51413 # 单个种子最大连接数, 默认:55 #bt-max-peers=55 # 打开DHT功能, PT需要禁用, 默认:true enable-dht=true # 打开IPv6 DHT功能, PT需要禁用 #enable-dht6=false # DHT网络监听端口, 默认:6881-6999 #dht-listen-port=6881-6999 # 本地节点查找, PT需要禁用, 默认:false bt-enable-lpd=true # 种子交换, PT需要禁用, 默认:true enable-peer-exchange=false # 每个种子限速, 对少种的PT很有用, 默认:50K #bt-request-peer-speed-limit=50K # 客户端伪装, PT需要 #peer-id-prefix=-TR2770- user-agent=Transmission/2.92 #user-agent=netdisk;4.4.0.6;PC;PC-Windows;6.2.9200;WindowsBaiduYunGuanJia # 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0 seed-ratio=1.0 #作种时间大于30分钟，则停止作种 seed-time=30 # 强制保存会话, 话即使任务已经完成, 默认:false # 较新的版本开启后会在任务完成后依然保留.aria2文件 #force-save=false # BT校验相关, 默认:true bt-hash-check-seed=true # 继续之前的BT任务时, 无需再次校验, 默认:false bt-seed-unverified=false # 保存磁力链接元数据为种子文件(.torrent文件), 默认:false bt-save-metadata=true #下载完成后删除.ara2的同名文件 EOF # 启动aria2服务,此处为后台启动 systemctl daemon-reload systemctl enable --now aria2.service 命令行未免太抽象,来个 GUI 吧 aira2 开启 rpc 之后支持很多种 GUI,我这里推荐一个ariaNG,由于这是一个纯前端的 GUI 框架,目前我没有配置 nginx 这些 web 服务器,所以这个部署过程不作演示,部署好之后访问 http://ip:port/jsonrpc 即可\n","date":"2024-10-08T00:00:00Z","permalink":"http://localhost:1313/zh-cn/2024/10/08/aria/","section":"posts","series":["aria2"],"summary":"云端数据飘渺间,千兆宽带瞬息连。BT姐姐任你看,下载神速如闪电。","tags":["aria2","bt下载"],"title":"全能下载器Aria2","type":null},{"categories":["stashApp"],"contents":"介绍 在搜索 ios 翻墙软件中无意中发现了这个神奇的应用\u0026hellip;真的是无意中发现的\u0026hellip;\ngithub 项目地址\nwiki 地址\n一个小tips 该软件会自动识别当前所在的路径并在该路径生成配置文件,可以利用这点找到配置文件位置\n需要注意如果作权限划分的,一定要确保设置的目录是有访问权限的,不过是媒体文件夹还是自动生成的缓存文件夹\n安装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 apt-get install -y ffmpeg # 小姐姐数据库所在位置 mkdir /mnt/samsung/medias/stash # 小姐姐缩略图所在位置 mkdir /mnt/samsung/medias/stash/generated # 小姐姐缓存位置 mkdir /mnt/samsung/medias/stash/cache # 插件位置 mkdir /opt/stash/plugins # 刮削器位置 mkdir /opt/stash/scrapers # 应用文件位置 mkdir /opt/stash/bin # 配置文件位置 mkdir /opt/stash/config # 运行之后记得把数据库设置一下权限 # R是递归,d是子文件夹自动继承相同的访问权限 setfacl -dR -m u:stash:rw /mnt/samsung/medias/stash setfacl -m u:stash:rw stash.sqlite cat \u0026gt; /etc/systemd/system/stash.service \u0026lt;\u0026lt;EOF [Unit] Description=StashApp Service After=network.target [Service] Type=simple User=stash Group=stash # 运行 StashApp 的命令 ExecStart=/opt/stash/bin/stash -c /opt/stash/config/config.yml # 请确保这个路径是正确的 # 设置日志文件路径 StandardOutput=journal StandardError=journal # 自动重启服务 Restart=on-failure RestartSec=5 [Install] WantedBy=multi-user.target EOF systemctl daemon-reload systemctl enable --now stash.service 之后进入自行设置一下就好了,软件支持中文,默认监听 9999 端口,因为这种媒体海报墙很多教程并且这个 stash 实在有违我正人君子老色批的形象,就不详细介绍配置过程了\n","date":"2024-10-08T00:00:00Z","permalink":"http://localhost:1313/zh-cn/2024/10/08/stash/","section":"posts","series":[],"summary":"在搜索ios翻墙软件中无意中发现了这个神奇的应用\u0026hellip;真的是无意中发现的\u0026hellip;","tags":["stash","影音服务器"],"title":"小姐姐的精装修大house之Stash","type":null},{"categories":["内网穿透","tailscale"],"contents":"介绍 之前给大家介绍过 zerotier 内网穿透的方案,虽然 zerotier 很方便,但是他在 windows 下卸载不干净会出现残留,如果此时下载新版本的 zerotier 会导致无法使用,那你不卸载不就没事了,所以今天给大家介绍一个新的内网穿透工具,同样非常强大的 tailscale\n安装 tailscale 官方安装教程\n1 2 3 4 5 6 # debian12 安装 curl -fsSL https://pkgs.tailscale.com/stable/debian/bookworm.noarmor.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg \u0026gt;/dev/null curl -fsSL https://pkgs.tailscale.com/stable/debian/bookworm.tailscale-keyring.list | sudo tee /etc/apt/sources.list.d/tailscale.list sudo apt-get update sudo apt-get install tailscale 当然,他们也有一键安装脚本\n1 curl -fsSL https://tailscale.com/install.sh | sh 启动 1 2 3 4 5 6 7 # --advertise-routes: 公布子网路由 # --accept-routes: 允许发现其他子网路由 # --accept-dns: 启用魔法DNS,会覆写/etc/resolv.conf文件,配置不好容易查不到dns断网 # --netfilter-mode: 这个选项效果类似iptables的功能,不熟这个可以关掉然后用iptables或者nftables配置四表五链 tailscale up --netfilter-mode=off --advertise-routes=192.168.50.0/24 --accept-routes --accept-dns=false # 设置自动更新 tailscale set --auto-update 启动之后会出现一个网址,把那个网址在浏览器中打开按照提示操作即可,之后进入 tailscale 的控制界面,把 key expire 关掉,不然这个节点会被自动踢出网络,然后在开启子网路由\n这样之后就可以访问到内网了\n万全之策 经过上面的一顿操作,你会发现内网设备还是不能通过它访问外网,而且外网也不能通过他访问内网其他设备,为什么咧?因为防火墙 没配置放行规则,所以需要配置一下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # 开启ipv4转发,不然会默认丢包 echo \u0026#34;net.ipv4.ip_forward=1\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf sysctl -p #查看配置是否生效 # 设置nftables的配置文件 cat \u0026gt; /etc/nftables.rules \u0026lt;\u0026lt;EOF table ip filter { } table ip nat { } table ip6 filter { } table ip6 nat { } table inet filter { chain forward { type filter hook forward priority filter; policy accept; iif \u0026#34;ens18\u0026#34; accept oif \u0026#34;ens18\u0026#34; accept iif \u0026#34;tailscale0\u0026#34; accept oif \u0026#34;tailscale0\u0026#34; accept } } table inet nat { chain postrouting { type nat hook postrouting priority srcnat; policy accept; oif \u0026#34;ens18\u0026#34; masquerade oif \u0026#34;tailscale0\u0026#34; masquerade } } EOF 由于每次重启之后 nftables 的规则会失效,我们使用 systemctl 服务控制 nftables 的加载规则行为\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 cat \u0026gt; /etc/systemd/system/tailscale-gateway.service \u0026lt;\u0026lt;EOF [Unit] Description=Run script after tailscale0 appears BindsTo=tailscaled.service After=tailscaled.service network.target [Service] Type=oneshot ExecStart=nft -f /etc/nftables.rules RemainAfterExit=yes [Install] WantedBy=multi-user.target EOF systemctl daemon-reload systemctl enable tailscale-gateway 如此一来这台主机就可以成为建立内外网沟通的桥梁了,如果要由 A 地的 192.168.50.0/24 网段访问 B 地的 192.168.51.0/24 网段,那么只需要在 A 地要访问 B 地的设备添加一条路由将 192.168.51.0/24 网段路由到 A 地的 tailscale 节点主机即可\n","date":"2024-10-07T00:00:00Z","permalink":"http://localhost:1313/zh-cn/2024/10/07/tailscale-tutorial-1/","section":"posts","series":["tailscale一点通"],"summary":"欲火焚身身在外,2T资源隔天涯,域名绑定终不便,唯有穿透合我意","tags":["内网穿透","tailscale"],"title":"Tailscale教程第一弹","type":null},{"categories":["zerotier一点通"],"contents":"B 站视频链接 在云服务器上安装 zerotier 前言,先开个 IP 转发先 1 echo \u0026#34;net.ipv4.ip_forward=1\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf 第一步 配置 zerotier 1 curl -s https://install.zerotier.com | sudo bash 第二步 将云服务器添加进网络 1 2 # 加入网络 xxxxx为网络ID sudo zerotier-cli join xxxxxxxx 第三步 生成 moon 文件并修改配置 1 2 3 4 # 生成moon文件 cd /var/lib/zerotier-one sudo zerotier-idtool initmoon identity.public \u0026gt;\u0026gt; moon.json sudo nano moon.json 将配置文件中的“stableEndpoints”: []的[]填上[“公网 IP:9993”] 修改完毕后生成\n1 2 # 生成moon文件 sudo zerotier-idtool genmoon moon.json 第四步 把 moon 文件移动到 moons.d 目录 1 2 3 4 sudo mkdir moons.d sudo mv 000000xxxxxxxxxx.moon moons.d #重启服务 sudo systemctl restart zerotier-one 客户端 linux 1 2 3 4 5 6 7 8 9 10 11 12 13 14 zerotier-cli join 网络id # 查看状态 zerotier-cli listpeers # 设置moon服务器 zerotier-cli orbit xxxxxxxxxx xxxxxxxxxx # 查看网卡名称 ip addr # 开启转发 iptables -I FORWARD -i ens192 -j ACCEPT iptables -I FORWARD -o ens192 -j ACCEPT iptables -t nat -I POSTROUTING -o ens192 -j MASQUERADE iptables -I FORWARD -i ztk4jk7xov -j ACCEPT iptables -I FORWARD -o ztk4jk7xov -j ACCEPT iptables -t nat -I POSTROUTING -o ztk4jk7xov -j MASQUERADE windows 1 2 3 4 5 zerotier-cli.bat join 网络id # 查看状态 zerotier-cli.bat listpeers # 设置moon服务器 zerotier-cli.bat orbit xxxxxxxxxx xxxxxxxxxx ","date":"2024-08-18T00:00:00Z","permalink":"http://localhost:1313/zh-cn/2024/08/18/zerotier/","section":"posts","series":["zerotier教程"],"summary":"使用zerotier实现异地组网,天涯海角回家路","tags":["zerotier","异地组网"],"title":"Zerotier异地组网","type":null},{"categories":["singbox十点不通"],"contents":"首先配置系统环境 首先要安装必要的软件以及系统的配置\n安装必要的软件 1 2 3 apt-get update # 安装必要的软件 apt-get install -y sudo vim tar unzip resolvconf 开启 ipv4 转发 1 2 echo \u0026#34;net.ipv4.ip_forward=1\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf sysctl -p 修改 dns 服务器为本机 ip 1 2 3 4 # ****为你的本机 ip echo \u0026#34;nameserver ****\u0026#34; \u0026gt;\u0026gt; /etc/resolvconf/resolv.conf.d/head # 让配置文件生效 resolvconf -u 创建文件夹 1 2 mkdir /opt/mosdns mkdir -p /opt/singbox/lib 下载软件 首先去网站下载对应的软件\nsing-box 链接 mosdns 链接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 # 上传压缩包到 root 目录下,非 root 用户改为绝对路径 unzip mosdns-*.zip \u0026#34;mosdns\u0026#34; -d /opt/mosdns/ tar -zxvf sing-box-*.tar.gz --strip-components=1 -C /opt/singbox/ chmod +x /opt/singbox/sing-box chmod +x /opt/mosdns/mosdns # singbox的默认运行配置 cat \u0026gt; /opt/singbox/config.json \u0026lt;\u0026lt; EOF { \u0026#34;log\u0026#34;: { \u0026#34;level\u0026#34;: \u0026#34;info\u0026#34; }, \u0026#34;dns\u0026#34;: { \u0026#34;servers\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;tls://8.8.8.8\u0026#34; } ] }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;shadowsocks\u0026#34;, \u0026#34;listen\u0026#34;: \u0026#34;::\u0026#34;, \u0026#34;listen_port\u0026#34;: 8080, \u0026#34;sniff\u0026#34;: true, \u0026#34;network\u0026#34;: \u0026#34;tcp\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;2022-blake3-aes-128-gcm\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;8JCsPssfgS8tiRwiMlhARg==\u0026#34; } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;direct\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;dns-out\u0026#34; } ], \u0026#34;route\u0026#34;: { \u0026#34;rules\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;outbound\u0026#34;: \u0026#34;dns-out\u0026#34; } ] } } EOF cat \u0026gt; /opt/mosdns/config.yaml \u0026lt;\u0026lt; EOF log: level: info file: \u0026#34;/opt/mosdns/mosdns.log\u0026#34; api: http: \u0026#34;0.0.0.0:9091\u0026#34; include: [] plugins: - tag: hosts type: hosts args: entries: - \u0026#34;woshiwo.com 192.168.234.4\u0026#34; - \u0026#34;shibuyiyangdeyanhuo.com 192.168.234.2\u0026#34; - tag: forward_dns type: forward args: concurrent: 1 upstreams: - addr: 1.1.1.1 bootstrap: 119.29.29.29 enable_pipeline: false max_conns: 2 insecure_skip_verify: false idle_timeout: 30 enable_http3: false - tag: dns_sequence type: sequence args: - exec: prefer_ipv4 - exec: \\$forward_dns - tag: dns_query type: sequence args: - exec: \\$dns_sequence - tag: fallback type: fallback args: primary: dns_query secondary: dns_query threshold: 500 always_standby: true - tag: main_sequence type: sequence args: - exec: \\$hosts - matches: - has_resp exec: accept - exec: \\$fallback - tag: udp_server type: udp_server args: entry: main_sequence listen: \u0026#34;0.0.0.0:53\u0026#34; - tag: tcp_server type: tcp_server args: entry: main_sequence listen: \u0026#34;0.0.0.0:53\u0026#34; EOF 配置辣种服务,方便开机坐上来自己动 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 cat \u0026gt; /etc/systemd/system/sing-box.service \u0026lt;\u0026lt; EOF [Unit] Description=sing-box service Documentation=https://sing-box.sagernet.org After=network.target nss-lookup.target network-online.target [Service] CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_SYS_PTRACE CAP_DAC_READ_SEARCH AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_SYS_PTRACE CAP_DAC_READ_SEARCH ExecStart=/opt/singbox/sing-box -D /opt/singbox/lib -c /opt/singbox/config.json run ExecReload=/bin/kill -HUP $MAINPID Restart=on-failure RestartSec=10s LimitNOFILE=infinity [Install] WantedBy=multi-user.target EOF cat \u0026gt; /etc/systemd/system/mosdns.service \u0026lt;\u0026lt; EOF [Unit] Description=A DNS forwarder ConditionFileIsExecutable=/opt/mosdns/mosdns [Service] StartLimitInterval=5 StartLimitBurst=10 ExecStart=/opt/mosdns/mosdns \u0026#34;start\u0026#34; \u0026#34;--as-service\u0026#34; \u0026#34;-d\u0026#34; \u0026#34;/opt/mosdns\u0026#34; \u0026#34;-c\u0026#34; \u0026#34;/opt/mosdns/config.yaml\u0026#34; Restart=always RestartSec=120 EnvironmentFile=-/etc/sysconfig/mosdns [Install] WantedBy=multi-user.target EOF systemctl daemon-reload systemctl enable sing-box.service systemctl enable mosdns.service systemctl start sing-box.service systemctl start mosdns.service yua 和 eimi 的一番赛高使用方式 由于 singbox 的似乎不具备 host 劫持的能力,反正我没看到,所以在此引入了 mosdns 作为 host 劫持的服务,内网设备将 dns 服务器指向本方案主机,由于是内网的 ip 段,singbox 不会劫持该 dns 请求,而 mosdns 则正常监听 53 端口,所以会接收到 dns 请求,之后 mosdns 根据 host 列表决定是否向上级 dns 查询,如果命中 host 列表,则返回 host 对应的 ip,否则向上级查询 dns,但是发出的 dns 请求是像公网请求的,此时会被 sing-box 的 dns 模块劫持,之后会根据 sing-box 的配置,将请求转发到指定的服务器,mosdns 在这个方案中只是补全了 sing-box 没有的 host 劫持能力\n结束 这样就可以愉快的让 yua 和 eimi 坐上来自己动了\n","date":"2024-07-11T00:00:00Z","permalink":"http://localhost:1313/zh-cn/2024/07/11/two-sexy-bitches-singbox-and-mosdns/","section":"posts","series":["singbox:从入门到clash"],"summary":"在上期介绍的singbox配置中,singbox的host是重定向,而不是返回目的域名的ip,这就像你想找mikami,但是他返回给你fukada,中间的过程都不知道,虽然最后都爽了但是蒙在鼓里的感觉并不好,所以需要一个中间人,本方案使用mosdns作host劫持的服务器","tags":["singbox","科学上网","mosdns","host劫持"],"title":"双飞singbox和mosdns","type":null},{"categories":["singbox十点不通"],"contents":" 前言 前段时间几乎\u0026quot;大地震\u0026quot;,clash 归档的归档,删库的删库。只能在此给大佬祝好!\n但是,失去了 clash,我们还能用什么连接到世界呢？当然是把你现在有的 clash 软件归档存好啦\n好吧,其实 clash 删库影响没有那么大,各个平台都有非常好用的软件,比如 windows,mac 还可以用v2ray,nekoray这些软件,但真正苦的其实是像我这种垃圾佬,我们这些人饱受换源之苦,代理之痛,可又经常换设备折腾,搞新系统蹂躏,所以我就妄图一次配置就能享受坐上来自己动的极致舒爽。也就是透明代理啦~\n之前我出过在 debian 部署v2raya的教程,但是当时我正好出了我自用的 j1800,购入了性能极为强悍的 j1900(主要是为了多网口才换的),而 clash 删库正好发生在我卖出了 j1800,等待 j1900 的空挡期\n哈哈笑死,不存档的后果。\n拿到手之后我第一时间配置 v2raya,结果那时候他的软件源直接失效了\n哈哈笑死,不存档的后果\n虽然最后还是去 git 上直接下了源代码上传配置好了。\n但为了不重蹈\u0026quot;哈哈笑死,不存档的后果\u0026quot;,我决定养成存档的习惯,同时 clash 删库让我明白自古专一没结局,终是海王赢天下,所以我顺便研究了一下最近超强内核sing-box的使用方法。\n结果发现这玩意直接把我之前的方案干碎了,废话,手搓玩家基本都是要啥自己建啥,居然说了这么多废话\u0026hellip;现在开始教程吧\n由我提供的一站式部署教程 开个 ip 转发先 1 echo \u0026#34;net.ipv4.ip_forward=1\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf 配置文件指南 配置文件链接\n下载后在里面的\u0026quot;singboxONE\u0026quot;的配置文件\u0026quot;config.json\u0026quot;添加你自己的代理配置,我在文件夹里面已经有 ss,vmess,trojan 的模板。\n注意事项 有时代理节点是域名,结果域名在 geosite 里面属于国外域名,会被 dns 分流到代理出站,但是此时 singbox 并不知道代理节点的 IP,于是就会死循环,解决这个问题需要在 dns 配置下添加一条规则\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026#34;dns\u0026#34;: { \u0026#34;servers\u0026#34;: [ ], \u0026#34;rules\u0026#34;: [ { \u0026#34;outbound\u0026#34;: \u0026#34;any\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;local\u0026#34; } ], \u0026#34;strategy\u0026#34;: \u0026#34;prefer_ipv4\u0026#34;, \u0026#34;final\u0026#34;: \u0026#34;google\u0026#34;, \u0026#34;disable_cache\u0026#34;: false, \u0026#34;disable_expire\u0026#34;: false, \u0026#34;independent_cache\u0026#34;: false, \u0026#34;reverse_mapping\u0026#34;: false }, 根据测试结果,dns 配置文件的规则是没有像 clash 那样的先后顺序的(可能不对,希望懂哥来解释一下这个 any 的机制)\n常见代理配置模板 ss 模板 1 2 3 4 5 6 7 8 { \u0026#34;type\u0026#34;: \u0026#34;shadowsocks\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;proxy\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;自己的\u0026#34;, \u0026#34;server_port\u0026#34;: 45144, //自己的端口 \u0026#34;method\u0026#34;: \u0026#34;自己的\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;自己的\u0026#34; }, vmes 模板 1 2 3 4 5 6 7 8 9 10 11 12 13 { \u0026#34;type\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;proxy\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;换你自己的\u0026#34;, \u0026#34;server_port\u0026#34;: 123, //自己的端口 \u0026#34;uuid\u0026#34;: \u0026#34;换你自己的\u0026#34;, \u0026#34;security\u0026#34;: \u0026#34;auto\u0026#34;, \u0026#34;transport\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/\u0026#34;, \u0026#34;early_data_header_name\u0026#34;: \u0026#34;Sec-WebSocket-Protocol\u0026#34; } } trojan 模板 1 2 3 4 5 6 7 8 9 10 11 12 13 { \u0026#34;type\u0026#34;: \u0026#34;trojan\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;proxy\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;自己的\u0026#34;, \u0026#34;server_port\u0026#34;: 4203, //自己的端口 \u0026#34;password\u0026#34;: \u0026#34;自己的\u0026#34;, \u0026#34;tls\u0026#34;: { \u0026#34;enabled\u0026#34;: true, \u0026#34;disable_sni\u0026#34;: false, \u0026#34;server_name\u0026#34;: \u0026#34;自己的\u0026#34;, \u0026#34;insecure\u0026#34;: true } } 完成之后确保 singboxONE 有如下文件\nconfig.json geoip.db geosite.db sing-box sing-box.service 1 2 3 4 5 6 7 8 9 10 11 12 13 # 创建日志和配置文件夹以及存放geo数据库 mkdir -p /var/singbox mkdir -p /var/lib/sing-box mkdir -p /usr/local/etc/sing-box chmod -R +w /var/singbox # 将软件以及配置还有geo数据库移动到对应文件夹 mv singboxONE/sing-box /usr/local/bin mv singboxONE/sing-box.service /etc/systemd/system mv singboxONE/config.json /usr/local/etc/sing-box mv singboxONE/geoip.db /var/lib/sing-box mv singboxONE/geosite.db /var/lib/sing-box # 赋予singbox二进制文件可执行权限 chmod +x /usr/local/bin/sing-box 重载系统服务并开启 sing-box\n1 2 3 4 5 6 # 重载systemctl配置否则下面开启singbox的命令是无效的 systemctl daemon-reload # 开启sing-box systemctl start sing-box.service systemctl enable sing-box.service systemctl status sing-box.service singbox 劫持 host singbox 中设置 host 劫持 sing-box 劫持 host 需要在 route 配置中添加域名规则并结合出站配置使用\n并且注意!!!\nroute 模块的规则有先后顺序,先匹配到先出站\r具体操作很简单,在出站设置一个直连出站并覆写 IP 地址和端口,最后在路由的规则中添加一条域名规则,匹配到这条规则就走自定义的出站\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 { \u0026#34;log\u0026#34;: { \u0026#34;disabled\u0026#34;: false, \u0026#34;level\u0026#34;: \u0026#34;info\u0026#34;, \u0026#34;output\u0026#34;: \u0026#34;/var/singbox/box.log\u0026#34;, \u0026#34;timestamp\u0026#34;: true }, \u0026#34;dns\u0026#34;: { \u0026#34;servers\u0026#34;: [], \u0026#34;rules\u0026#34;: [{ \u0026#34;outbound\u0026#34;: \u0026#34;any\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;local\u0026#34; }], \u0026#34;strategy\u0026#34;: \u0026#34;prefer_ipv4\u0026#34;, \u0026#34;final\u0026#34;: \u0026#34;google\u0026#34;, \u0026#34;disable_cache\u0026#34;: false, \u0026#34;disable_expire\u0026#34;: false, \u0026#34;independent_cache\u0026#34;: false, \u0026#34;reverse_mapping\u0026#34;: false }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;tun\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;tun-in\u0026#34;, \u0026#34;inet4_address\u0026#34;: \u0026#34;172.19.0.1/30\u0026#34;, \u0026#34;mtu\u0026#34;: 1400, \u0026#34;auto_route\u0026#34;: true, \u0026#34;strict_route\u0026#34;: false, \u0026#34;stack\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;sniff\u0026#34;: true, \u0026#34;sniff_override_destination\u0026#34;: false } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;direct\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;direct\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;direct\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;hosthijack\u0026#34;, \u0026#34;override_address\u0026#34;: \u0026#34;192.168.234.3\u0026#34;, \u0026#34;override_port\u0026#34;: 9093 }, { \u0026#34;type\u0026#34;: \u0026#34;block\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;block\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;dns-out\u0026#34; } ], \u0026#34;route\u0026#34;: { \u0026#34;geoip\u0026#34;: { \u0026#34;download_url\u0026#34;: \u0026#34;https://github.com/soffchen/sing-geoip/releases/latest/download/geoip.db\u0026#34;, \u0026#34;download_detour\u0026#34;: \u0026#34;proxy\u0026#34; }, \u0026#34;geosite\u0026#34;: { \u0026#34;download_url\u0026#34;: \u0026#34;https://github.com/soffchen/sing-geosite/releases/latest/download/geosite.db\u0026#34;, \u0026#34;download_detour\u0026#34;: \u0026#34;proxy\u0026#34; }, \u0026#34;rules\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;outbound\u0026#34;: \u0026#34;dns-out\u0026#34; }, { \u0026#34;protocol\u0026#34;: [\u0026#34;quic\u0026#34;], \u0026#34;outbound\u0026#34;: \u0026#34;block\u0026#34; }, { \u0026#34;domain\u0026#34;: \u0026#34;自定义域名\u0026#34;, \u0026#34;outbound\u0026#34;: \u0026#34;hosthijack\u0026#34; } ], \u0026#34;auto_detect_interface\u0026#34;: true } } ","date":"2024-06-07T00:00:00Z","permalink":"http://localhost:1313/zh-cn/2024/06/07/introduce-singbox-part1/","section":"posts","series":["singbox:从入门到clash"],"summary":"撑着油纸伞,独自彷徨在悠长,悠长又寂寥的墙内,我希望逢着一个丁香一样地水多活好singbox","tags":["singbox","科学上网"],"title":"初识singbox","type":null},{"categories":["软路由部署"],"contents":" 前期准备工作 首先刷好 debian,这个有手就行,唯一的问题是镜像源比较慢,不管是国内源还是官方源,建议烧香拜佛之后再装,或者打电话给运营商通知他们要出国一下让他们取消你的墙\n装好系统之后先更新软件源 1 2 apt-get update apt-get install -y vim wget curl tar zip sudo 启动 ssh 连接 1 2 echo \u0026#34;PermitRootLogin yes\u0026#34; \u0026gt;\u0026gt; /etc/ssh/sshd_config /etc/init.d/ssh restart 修改固定 ip 这步很关键,不然 DHCP 到期换 ip ,所有以这个为网关的设备都会成为孤儿\r1 vim /etc/network/interfaces 把原本的内容 auto lo\niface lo inet loopback\nallow-hotplug ens35\niface ens35 inet dhcp\n变为 iface ens35 inet static\naddress 192.168.1.100\nnetmask 255.255.255.0\ngateway 192.168.1.1\n使用 ipv6\niface ens35 inet6 dhcp\n开启 ipv4 转发 不开的话是没有办法代理分流的哦\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 填写如下内容开启ipv4转发,并关闭ipv6 echo \u0026#34;net.ipv4.ip_forward=1 net.ipv6.conf.all.disable_ipv6 = 1\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf # 如果你像我一样没有公网ipv4还想顺畅外网访问家中服务,就要把ipv6开启填这个 echo \u0026#34;net.ipv4.ip_forward=1\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf # 检查 sysctl -p # 清DNS缓存（debian12不需要） systemctl restart systemd-resolved.service # 重启 reboot # 检测ip ip addr 上传文件 将我提供的文件中的 clash 文件夹和 mosdns 文件夹上传到 root 目录下\n安装代理软件 安装 v2raya 添加公钥和软件源 1 2 3 4 5 6 # 报错的话可以试试逐条复制 wget -qO - https://apt.v2raya.org/key/public-key.asc | sudo tee /etc/apt/keyrings/v2raya.asc echo \u0026#34;deb [signed-by=/etc/apt/keyrings/v2raya.asc] https://apt.v2raya.org/ v2raya main\u0026#34; | sudo tee /etc/apt/sources.list.d/v2raya.list sudo apt update 添加软件源主要是 v2raya 的源不在官方源所以需要手动加一下\n安装 1 2 3 4 5 6 sudo apt install v2raya v2ray #v2ray内核 sudo apt install v2raya xray #xray内核 # 启动并设置自启 sudo systemctl start v2raya.service # 开机自启 sudo systemctl enable v2raya.service clash 永不为奴!! 添加 clash 的配置文件 1 2 3 4 5 wget -O config.yaml \u0026#39;你机场的订阅链接\u0026amp;flag=clash\u0026#39; # 下载Country.mmdb文件(去github上下载最新) wget https://github.com/Dreamacro/maxmind-geoip/releases/latest/download/Country.mmdb # 下载yacd面板(去github上找最新) wget https://github.com/haishanh/yacd/releases/download/v0.3.8/yacd.tar.xz 解压并移动到指定目录 1 2 3 tar -xf yacd.tar.xz mkdir /etc/clash mv public /etc/clash/yacd 下载 clash pre,ium 1 2 wget https://github.com/Dreamacro/clash/releases/download/premium/clash-linux-amd64-2023.08.17.gz gzip -d clash-linux-amd64-2023.08.17.gz 移动到指定目录 1 2 3 4 5 6 7 mv clash-linux-amd64-2023.08.17 /usr/local/bin/clash mkdir /etc/clash mv config.yaml /etc/clash/ mv Country.mmdb /etc/clash/ mv clash/template.yaml /etc/clash # 赋予执行权限 chmod +x /usr/local/bin/clash 启动 systemd 守护进程服务 这个步骤主要防暴毙 1 2 3 4 5 6 7 8 9 10 11 echo \u0026#34;[Unit] Description=Clash daemon, A rule-based proxy in Go. After=network-online.target [Service] Type=simple Restart=always ExecStart=/usr/local/bin/clash -d /etc/clash [Install] WantedBy=multi-user.target\u0026#34; \u0026gt;\u0026gt; /etc/systemd/system/clash.service 重新加载测试 1 2 3 4 5 6 7 systemctl daemon-reload # 将系统DNS服务器指定为本地的IP192.168.234.3 vim /etc/resolved.conf systemctl start clash # 开机自启 systemctl enable clash # 如果失败就不要用V3指令集的了 DNS 部分 安装 mosdns 下载 mosdns 1 2 3 4 5 6 7 8 9 10 # 报错的话可以试试把梯子关了 wget https://github.com/IrineSistiana/mosdns/releases/download/v5.1.3/mosdns-linux-amd64.zip mkdir /etc/mosdns mkdir /var/mosdns touch /var/disable-ads.txt mv mosdns/etc/mosdns/* /etc/mosdns mv mosdns/var/mosdns/* /var/mosdns mv mosdns/v2dat /opt chmod +x /opt/v2dat 康康你的 53 端口有没有被后入 1 2 3 4 5 6 7 lsof -i :53 # 根据你占用53端口的进程名字来修改stop后面的参数 systemctl stop systemd-resolved.service # 别忘了移除开机自启 systemctl disable systemd-resolved.service # 检查一下 lsof -i :53 mosdns:我要进来咯~ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 解压 unzip -o -d mosdns mosdns-xxx-xxx.zip # 把mosdns软件移到绝对工作目录 mv /root/mosdns/mosdns /usr/bin/ chmod +x /usr/bin/mosdns # mosdns service install -d 工作目录绝对路径 -c 配置文件路径 mosdns service install -d /usr/bin -c /etc/mosdns/config.yaml # 启动mosdns并设置开机自启 mosdns service start systemctl enable mosdns.service # 检查状态 systemctl status mosdns.service 安装 adguardhome DNS 拦截广告只能欺负野鸡网站\r,面对 youtube 以及国内的爱优腾都是被操的走不动路的,此外 DNS 规则也很难找\r,博主本人已经变成了广告的形状(不是)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # 下载AdGuardHome到本机,三选一都是安装脚本,能用就行 curl -s -S -L https://raw.githubusercontent.com/AdguardTeam/AdGuardHome/master/scripts/install.sh | sh -s -- -v wget --no-verbose -O - https://raw.githubusercontent.com/AdguardTeam/AdGuardHome/master/scripts/install.sh | sh -s -- -v fetch -o - https://raw.githubusercontent.com/AdguardTeam/AdGuardHome/master/scripts/install.sh | sh -s -- -v # 启动 systemctl start AdGuardHome # 状态 systemctl status AdGuardHome # 开机自启 systemctl enable AdGuardHome # 重启 systemctl restart AdGuardHome # 停止 systemctl stop AdGuardHome 然后访问 http://你的ip:3000设置 adguardhome 就行了\n终于结束了 1 2 3 4 5 6 7 8 9 10 11 12 13 14 vim /etc/resolv.conf # 将dns服务器设置为旁路由ip nameserver 192.168.50.5 # 编辑cron mkdir /etc/mycron mv /clash/clash_update.sh /etc/mycron mv /mosdns/mosdns_update.sh /etc/mycron chmod +x /etc/mycron/clash_update.sh chmod +x /etc/mycron/mosdns_update.sh # 添加 echo \u0026#34;30 4 * * * root /etc/mycron/mosdns_update.sh 35 4 * * * root /etc/mycron/clash_update.sh\u0026#34; \u0026gt;\u0026gt; /etc/crontab ","date":"2024-06-05T00:00:00Z","permalink":"http://localhost:1313/zh-cn/2024/06/05/home-gateway/","section":"posts","series":[],"summary":"给电脑刷上debian系统，然后安装openwrttttttt~~~个鬼!直接手搓命令行完成一个DNS,自动分流的家庭网关","tags":["软路由","debian"],"title":"将废弃电脑变成软路由","type":null},{"categories":null,"contents":"这里是个人简介的正文内容\u0026hellip;\r666\r测试测试\n","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/zh-cn/profile/","section":"","series":null,"summary":"这里是个人简介的正文内容\u0026hellip; 666 测试测试","tags":null,"title":"关于我","type":"profile"},{"categories":null,"contents":"","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/zh-cn/link/","section":"","series":null,"summary":"","tags":null,"title":"友链","type":"link"}]